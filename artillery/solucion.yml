# Configuracion del test script

config:
  target: 'https://localhost:8443'
  tls:
    rejectUnauthorized: false
  plugins:
    expect: { }
  phases:
    - duration: 40 # Duracion de la fase
      arrivalRate: 5 # Numero de usuarios por segundo
  payload:
    path: "books.csv"
    fields:
      - "bookTitle"
      - "bookDescription"
    order: random
  ensure:
    p95: 100 # El 95% de las conexiones tienen menos de 100ms de latencia
    maxErrorRate: 0 # 0% de tasa de error
  http:
    pool: 8 # Numero de conexiones simultaneas
  variables:
    username:
      - "user"
    admin:
      - "admin"
    password:
      - "pass"
scenarios:
  - name: "Usuario sin logear pide todos los libros y pide mas info del primero"
    weight: 7 # 7/10 (70%) (la suma de todos los weight de los escenarios es el total)
    flow:
      - get:
          url: "/api/books/"
          capture:
            - json: "$[0].title"
              as: "title"
          expect:
            - statusCode: 200
            - contentType: json
            - equals:
                - "SUEÃ‘OS DE ACERO Y NEON"
                - "{{ title }}"
  - name: "Usuario logeado crea un libro y lo pide para comprobar"
    weight: 2 # 2/10 casos
    flow:
      - get:
          url: "/api/logIn"
          auth:
            user: "{{ username }}"
            pass: "{{ password }}"
            expect:
              - statusCode: 200
      - post:
          url: "/api/books/"
          json:
            title: "{{ bookTitle }}"
            description: "{{ bookDescription }}"
          capture:
            - json: "$.id"
              as: "id"
          expect:
            - statusCode: 201
      - get:
          url: "/api/books/{{ id }}"
          expect:
            - statusCode: 200
  - name: "Admin crea un libro, comprueba que lo ha creado, lo borra, y comprueba que lo ha borrado"
    weight: 1 # 1/10 casos
    flow:
      - get:
          url: "/api/books/"